[gd_scene load_steps=6 format=2]

[ext_resource path="res://addons/godot-polyliner/demos/ropetesting/RopeSegment3D.gd" type="Script" id=1]
[ext_resource path="res://addons/godot-polyliner/Line3D/Line3D.gd" type="Script" id=2]

[sub_resource type="CapsuleShape3D" id=1]
radius = 0.1

[sub_resource type="Shader" id=2]
code = "shader_type spatial;
render_mode skip_vertex_transform, cull_disabled;
render_mode depth_draw_opaque;

uniform float line_width = 0.1;
uniform bool tangent_facing = false;
uniform bool rounded = false;
float line_process(float width, inout vec3 vertex, vec3 dir_to_cam, vec2 uv,
					inout vec3 normal, inout vec3 tangent){
	vec3 dir_to_next_point = normal;
	vec3 perp = tangent;
	if (!tangent_facing) {
		perp = normalize(cross(dir_to_cam,dir_to_next_point));
	}
	
	float is_end = 0.5-uv.x;
	is_end = float(abs(is_end) > 0.5) * -sign(is_end);
	vec3 rounder = vec3(0.0); 
	if (rounded) { 
		rounder = is_end * normalize(cross(perp,dir_to_cam));
	}

	float side = sign(float(uv.y > 0.5)-0.5);
	vertex += ((perp*side)-rounder) * width;
	
	tangent = perp;
	normal = cross(perp,dir_to_next_point);
	
	return is_end;
}

varying float is_end;
void vertex(){
	VERTEX = (MODELVIEW_MATRIX * vec4(VERTEX,1.0)).xyz;
	NORMAL = mat3(MODELVIEW_MATRIX) * NORMAL;
	TANGENT = mat3(MODELVIEW_MATRIX) * TANGENT;
	
	is_end = line_process(line_width,VERTEX,normalize(VERTEX),UV2,NORMAL,TANGENT);
	
	BINORMAL = cross(TANGENT,NORMAL);
	if (rounded) {
		float uv_correct = is_end*line_width;
		UV.x += uv_correct;
		UV2.x += uv_correct;
	}
}

float getDistToLineCenter(vec2 uv) {
	vec2 c = vec2(is_end*0.5,uv.y-0.5);
	return length(c);
}

float getDistSquaredToLineCenter(vec2 uv) {
	vec2 c = vec2(is_end*0.5,uv.y-0.5);
	return dot(c,c);
}

vec2 getLineTubeNormal(vec2 uv) {
	vec2 n = vec2(0.5);
		n.x = uv.y;
		if (rounded) {
			n.y = is_end*0.5+0.5;
		}
	return n;
}

uniform vec4 color : source_color = vec4(vec3(1.0),1.0);
uniform float metallic  : hint_range(0.0,1.0,0.005) = 0.0;
uniform float specular  : hint_range(0.0,1.0,0.005) = 0.5;
uniform float roughness : hint_range(0.0,1.0,0.005) = 0.5;
void fragment() {
	if (!FRONT_FACING) { NORMAL = -NORMAL; }
	
	if (!tangent_facing) { NORMAL_MAP.xy = getLineTubeNormal(UV2); }
	
	
	if (rounded) {
		if (abs(is_end) > 0.0) {
			ALPHA *= smoothstep(1.0,0.95,getDistSquaredToLineCenter(UV)*4.0);
		}
	}
	
	ALBEDO = color.rgb;
	SPECULAR = specular;
	ROUGHNESS = roughness;
	METALLIC = metallic;
	
	ALPHA_SCISSOR_THRESHOLD = 0.001; // uncomment for alpha blending
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/line_width = 0.05
shader_param/tangent_facing = false
shader_param/rounded = false
shader_param/color = Color( 1, 1, 1, 1 )
shader_param/metallic = 0.0
shader_param/specular = 0.5
shader_param/roughness = 0.5

[node name="RigidBody3D" type="RigidBody3D"]
can_sleep = false
script = ExtResource( 1 )

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
transform = Transform3D( -4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, 0, 0, 0 )
shape = SubResource( 1 )

[node name="Generic6DOFJoint3D" type="Generic6DOFJoint3D" parent="."]
nodes/node_a = NodePath("..")
linear_limit_x/enabled = false
linear_spring_x/enabled = true
linear_spring_x/stiffness = 50.0
linear_spring_x/damping = 1.0
linear_spring_x/equilibrium_point = 0.1
angular_limit_x/enabled = false
linear_limit_y/enabled = false
linear_spring_y/enabled = true
linear_spring_y/stiffness = 50.0
linear_spring_y/damping = 1.0
linear_spring_y/equilibrium_point = 0.1
angular_limit_y/enabled = false
linear_limit_z/enabled = false
linear_spring_z/enabled = true
linear_spring_z/stiffness = 50.0
linear_spring_z/damping = 1.0
linear_spring_z/equilibrium_point = 0.1
angular_limit_z/enabled = false

[node name="Line3D" type="Node3D" parent="."]
visible = false
script = ExtResource( 2 )
material = SubResource( 3 )
points = PackedVector3Array( 0.6, 0, 0, 0, 0, 0, -0.6, 0, 0 )
