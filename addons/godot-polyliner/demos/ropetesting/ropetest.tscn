[gd_scene load_steps=29 format=2]

[ext_resource path="res://addons/godot-polyliner/shaders/line_glow.gdshader" type="Shader" id=1]
[ext_resource path="res://addons/godot-polyliner/Line3D/Line3D.gd" type="Script" id=2]
[ext_resource path="res://addons/godot-polyliner/Line3D/LinePath3D.gd" type="Script" id=3]
[ext_resource path="res://addons/godot-polyliner/Trail3D/Trail3D.gd" type="Script" id=4]
[ext_resource path="res://addons/godot-polyliner/demos/ropetesting/ropetest.gd" type="Script" id=5]
[ext_resource path="res://addons/godot-polyliner/shaders/line_fade.gdshader" type="Shader" id=6]
[ext_resource path="res://addons/godot-polyliner/shaders/parallax/raymarch_xmaslightbulbs.gdshader" type="Shader" id=7]

[sub_resource type="Sky" id=1]
sky_top_color = Color( 0.219608, 0.219608, 0.219608, 1 )
sky_horizon_color = Color( 0.411765, 0.411765, 0.411765, 1 )
texture_size = 0

[sub_resource type="Environment" id=2]
background_mode = 2
background_sky = SubResource( 1 )
ambient_light_color = Color( 0.0431373, 0, 0.356863, 1 )
ambient_light_sky_contribution = 0.0

[sub_resource type="PlaneMesh" id=3]

[sub_resource type="BoxShape3D" id=9]
size = Vector3( 1, 0.4, 1 )

[sub_resource type="BoxShape3D" id=11]
resource_local_to_scene = true
size = Vector3( 0.5, 0.5, 0.5 )

[sub_resource type="StandardMaterial3D" id=34]

[sub_resource type="BoxMesh" id=35]
size = Vector3( 1, 1, 1 )

[sub_resource type="Shader" id=32]
code = "shader_type spatial;
render_mode skip_vertex_transform;

// \\\"tangent-facing\\\" code and \\\"rounded end\\\" code was removed
// for this particular shader

uniform float line_width = 0.05;
float line_process(float width, inout vec3 vertex, vec3 dir_to_cam, vec2 uv,
					inout vec3 normal, inout vec3 tangent){
	vec3 dir_to_next_point = normal;
	vec3 perp = normalize(cross(dir_to_cam,dir_to_next_point));
	
	float is_end = 0.5-uv.x;
	is_end = float(abs(is_end) > 0.5) * -sign(is_end);
	
	float side = sign(float(uv.y > 0.5)-0.5);
	vertex += (perp*side) * width;
	
	tangent = perp;
	normal = cross(perp,dir_to_next_point);
	
	return is_end;
}

varying mat3 TBN;
varying vec3 eye_dir;
varying float is_end;
void vertex(){
	VERTEX = (MODELVIEW_MATRIX * vec4(VERTEX,1.0)).xyz;
	NORMAL = mat3(MODELVIEW_MATRIX) * NORMAL;
	TANGENT = mat3(MODELVIEW_MATRIX) * TANGENT;
	
	is_end = line_process(line_width,VERTEX,normalize(VERTEX),UV,NORMAL,TANGENT);
	
	// TODO: Why does this make TBN work,
	// while it breaks normal mapping?
	BINORMAL = TANGENT;
	TANGENT = cross(BINORMAL,NORMAL);
	
	TBN = mat3(
		TANGENT,
		BINORMAL,
		NORMAL
	);
	
	eye_dir = normalize(VERTEX) * TBN;
}

mat3 rotation3dX(float angle) {
	float s = sin(angle);
	float c = cos(angle);

	return mat3(
		vec3(1.0, 0.0, 0.0),
		vec3(0.0, c, s),
		vec3(0.0, -s, c)
	);
}

float sdCylinder( vec3 p, float c ){
	return length(p.yz)-c;
}

float scene(vec3 p){
	p = p*rotation3dX(p.x*3.1415);
	float o1 = sdCylinder(p - vec3(0.0,-0.2,0.0),0.2);
	float o2 = sdCylinder(p - vec3(0.0,0.1,0.2),0.2);
	float o3 = sdCylinder(p - vec3(0.0,0.1,-0.2),0.2);
	
	float rope = min(o1,min(o2,o3));
	
	return rope;
}

vec3 getNormal( in vec3 p )
{
    const float h = 0.0001;
    const vec2 k = vec2(1,-1);
    return normalize( k.xyy*scene( p + k.xyy*h ) + 
                      k.yyx*scene( p + k.yyx*h ) + 
                      k.yxy*scene( p + k.yxy*h ) + 
                      k.xxx*scene( p + k.xxx*h ) );
}

float raymarch(vec3 ro, vec3 rd){
	float total_dist = 0.0;
	
	for(int i=0;i<60;i++){
		// culling below 3.0 is excessive
		// and even more visible at grazing angles
		if (total_dist > 3.0) { break; }
		
		vec3 ray = ro + (rd * total_dist);
		
		float dist = scene(ray);
		
		if (dist < 0.005){
			return total_dist;
		}
		
		total_dist += dist;
	}
	
	return -1.0;
}

vec2 hash22(vec2 p)
{
	vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));
	p3 += dot(p3, p3.yzx+33.33);
	return fract((p3.xx+p3.yz)*p3.zy);
}
float ao(vec3 p, vec3 n, vec2 fragcoord)
{
	vec3 t = normalize(cross(n,vec3(0.0,1.0,0.0)));
	vec3 b = normalize(cross(t,n));
	
	float inv_t = 1.0/10.0;
	
	float occ = 0.0;
	for (int i=0;i<10;i++)
	{
		vec2  aa = ( hash22(fragcoord+TIME*float(i+1)) );
		float ra = sqrt(aa.y);
		float rx = ra*cos(6.2831*aa.x); 
		float ry = ra*sin(6.2831*aa.x);
		float rz = sqrt( 1.0-aa.y );
		vec3  dir = vec3( rx*t + ry*b + rz*n );
		vec3 no;
		float hit = raymarch(p+dir*0.1,dir);
		if (hit < 0.0)
			occ += inv_t;
	}
	
	return occ;
}

uniform vec4 color : source_color = vec4(vec3(1.0,1.0,0.5),1.0);
uniform float twirl_aspect = 0.5;

void fragment(){
	// We can't do raycasts with objects
	// that intersect Z =< 0.0 in tangent-space; it gets clipped.
	// So the rope is actually below the line surface.
	vec3 ro = vec3(UV,0.45);
	vec3 rd = eye_dir;
	
	ro.x *= twirl_aspect / line_width;
	
	// fix weird offset
	ro.y += -0.5;
	
	// fit the model roughly to line mesh bounds
	ro.xy *= 0.8;
	
	float hit = raymarch(ro, rd);
	if (hit < 0.0) { discard; }
	
	vec3 hit_pos = ro + rd * hit;
	vec3 hit_normal = getNormal(hit_pos);
	NORMAL = TBN * hit_normal;
	
	float ao = ao(hit_pos, hit_normal, FRAGCOORD.xy);
	ALBEDO = color.rgb * ao;
	ROUGHNESS = 0.5;
}"

[sub_resource type="ShaderMaterial" id=31]
shader = SubResource( 32 )
shader_param/line_width = 0.2
shader_param/color = Color( 1, 1, 0.5, 1 )
shader_param/twirl_aspect = 5.0

[sub_resource type="SphereShape3D" id=10]

[sub_resource type="SphereMesh" id=33]

[sub_resource type="Shader" id=28]
code = "shader_type spatial;
render_mode unshaded;

mat3 rotation3dX(float angle) {
	float s = sin(angle);
	float c = cos(angle);

	return mat3(
		vec3(1.0, 0.0, 0.0),
		vec3(0.0, c, s),
		vec3(0.0, -s, c)
	);
}

mat3 rotate(vec3 axis, float angle) {
    axis = normalize(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;
	
	vec3 xxx = vec3(oc * axis.x * axis.x + c * s,
					oc * axis.x * axis.y - axis.z * s, 
					oc * axis.z * axis.x + axis.y * s);
	
	vec3 yyy = vec3(oc * axis.x * axis.y + axis.z * s, 
					oc * axis.y * axis.y + c * s,
					oc * axis.y * axis.z - axis.x * s);
	
	vec3 zzz = vec3(oc * axis.z * axis.x - axis.y * s, 
					oc * axis.y * axis.z + axis.x * s,
					oc * axis.z * axis.z + c * s);
	
	return mat3(xxx,yyy,zzz);
}

float sdCylinder( vec3 p, float c ){
	return length(p.yz)-c;
}


varying vec3 eye_dir;
void vertex(){
	vec3 world_cam = INV_VIEW_MATRIX[3].xyz;
	vec3 world_vertex = (MODEL_MATRIX * vec4(VERTEX,1.0)).xyz;
	
	BINORMAL = cross(TANGENT,NORMAL);
	mat3 TBN = mat3(
		TANGENT,
		BINORMAL,
		NORMAL
	);
	mat3 world_TBN = mat3(MODEL_MATRIX) * TBN;
	
	eye_dir = (world_vertex - world_cam) * world_TBN;
}

float scene(vec3 p){
//	p -= vec3(0.0,-0.3,0.0);
//	p = rotate(vec3(0.0,1.0,0.0),p.x*0.04) * p;
	p = p*rotation3dX(p.x*4.14);
	float o1 = sdCylinder(p - vec3(0.0,-0.2,0.0),0.2);
	float o2 = sdCylinder(p - vec3(0.0,0.1,0.2),0.2);
	float o3 = sdCylinder(p - vec3(0.0,0.1,-0.2),0.2);
	
	float rope = min(o1,min(o2,o3));
	
	return rope;
}

vec3 getNormal( in vec3 p )
{
    const float h = 0.0001; // replace by an appropriate value
    const vec2 k = vec2(1,-1);
    return normalize( k.xyy*scene( p + k.xyy*h ) + 
                      k.yyx*scene( p + k.yyx*h ) + 
                      k.yxy*scene( p + k.yxy*h ) + 
                      k.xxx*scene( p + k.xxx*h ) );
}

float raymarch(vec3 ro, vec3 rd){
	float total_dist = 0.0;
	
	for(int i=0;i < 40;i++){
		vec3 ray = ro + (rd * total_dist);
		
		float dist = scene(ray);
		
		if (dist < 0.005){
			return total_dist;
		}
		
		total_dist += dist;
	}
	
	return -1.0;
}

float fakeao(vec3 p,vec3 n){
	vec3 delta = n*0.05;
	float output = scene(p+delta);
	output += scene(p+delta*0.5)*1.2;
	output += scene(p+delta*1.0)*1.4;
	output += scene(p+delta*2.0)*1.8;
	return 1.0-(exp(output));
}
vec2 hash22(vec2 p)
{
	vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));
	p3 += dot(p3, p3.yzx+33.33);
	return fract((p3.xx+p3.yz)*p3.zy);
}
float ao(vec3 p, vec3 n, vec2 fragcoord)
{
	vec3 t = normalize(cross(n,vec3(0.0,1.0,0.0)));
	vec3 b = normalize(cross(t,n));
	
	float inv_t = 1.0/15.0;
	
	float occ = 0.0;
	for (int i=0;i<10;i++)
	{
		vec2  aa = ( hash22(fragcoord+TIME*float(i+1)) );
		float ra = sqrt(aa.y);
		float rx = ra*cos(6.2831*aa.x); 
		float ry = ra*sin(6.2831*aa.x);
		float rz = sqrt( 1.0-aa.y );
		vec3  dir = vec3( rx*t + ry*b + rz*n );
		vec3 no;
		float hit = raymarch(p+dir*0.2,dir);
		if (hit < 0.0)
			occ += inv_t;
	}
	
	return occ;
}

void fragment(){
	vec3 ro = vec3(UV,0.0);
	ro += vec3(0.0,-0.5,0.5);
	vec3 rd = normalize(eye_dir);
	
	float hit = raymarch(ro, rd);
	
	vec3 hitpos = ro + rd * hit;
	
	vec3 normal = getNormal(hitpos);
	float ao = ao(hitpos,normal,FRAGCOORD.xy);
	
	if (hit < 0.0)	discard;
	ALBEDO = vec3(1.0,0.5,0.0) *  (ao);
}"

[sub_resource type="ShaderMaterial" id=18]
shader = SubResource( 28 )

[sub_resource type="QuadMesh" id=22]

[sub_resource type="BoxMesh" id=19]

[sub_resource type="BoxShape3D" id=20]

[sub_resource type="ShaderMaterial" id=27]
shader = ExtResource( 6 )
shader_param/line_width = 1.0
shader_param/tangent_facing = true
shader_param/tangent_offset = 0.5
shader_param/color = Color( 1, 1, 1, 1 )
shader_param/alpha_curve = 0.5

[sub_resource type="ShaderMaterial" id=29]
shader = ExtResource( 1 )
shader_param/line_width = 0.0
shader_param/glow_width = 0.4
shader_param/tangent_facing = false
shader_param/rounded = true
shader_param/color = Color( 1, 1, 1, 1 )
shader_param/curve = 0.2

[sub_resource type="ShaderMaterial" id=37]
shader = ExtResource( 7 )
shader_param/line_width = 0.191
shader_param/twirl_aspect = 2.0
shader_param/angle = 1.124
shader_param/repeat_size = 1.0
shader_param/rot_angle = 0.0
shader_param/rot_period = 0.0
shader_param/roughness = 0.1
shader_param/color = Color( 1, 1, 1, 1 )

[sub_resource type="Curve3D" id=38]
bake_interval = 0.02
_data = {
"points": PackedVector3Array( -0.794917, -1.59787, -1.79256, 0.794917, 1.59787, 1.79256, 0.141981, 1.12793, 0.211593, -0.811577, 1.33557, -0.00136006, 0.811577, -1.33557, 0.00136006, 2.83198, 0.133918, 2.42691 ),
"tilts": PackedFloat32Array( 0, 0 )
}

[sub_resource type="ShaderMaterial" id=39]
shader = ExtResource( 7 )
shader_param/line_width = 0.05
shader_param/twirl_aspect = 0.5
shader_param/angle = 0.0
shader_param/repeat_size = 1.0
shader_param/rot_angle = 0.0
shader_param/rot_period = 0.0
shader_param/roughness = 0.293
shader_param/color = Color( 1, 1, 0.368627, 1 )

[node name="Node3D" type="Node3D"]
transform = Transform3D( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.0148439, 0, -0.0798446 )

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 2 )

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D( 0.707107, 0.5, 0.5, 0, -0.707107, 0.707107, 0.707107, -0.5, -0.5, 0, 4.37562, 0 )
shadow_enabled = true
directional_shadow_normal_bias = 0.2
directional_shadow_bias_split_scale = 1.0
directional_shadow_max_distance = 40.0

[node name="Camera3D" type="Camera3D" parent="."]
transform = Transform3D( -0.967383, -0.0784649, 0.24086, 0, 0.950819, 0.309747, -0.253319, 0.299644, -0.919806, 5.58673, 9.35005, -7.23411 )

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D( 9, 0, 0, 0, 1, 0, 0, 0, 9, -0.721719, 1.50942, 0.0287716 )
mesh = SubResource( 3 )

[node name="StaticBody3D" type="StaticBody3D" parent="MeshInstance3D"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="MeshInstance3D/StaticBody3D"]
shape = SubResource( 9 )

[node name="RigidBody3D" type="RigidBody3D" parent="."]
transform = Transform3D( 1, 0, 0, 0, 1, 0, 0, 0, 1, -4.59139, 11.7783, -0.591243 )
mode = 3
can_sleep = false
script = ExtResource( 5 )
end_segment = NodePath("../RigidBody2")
segment_count = 5
stiff_multiplier = 4.0
damp = 4.0

[node name="CollisionShape3D" type="CollisionShape3D" parent="RigidBody3D"]
shape = SubResource( 11 )
disabled = true

[node name="MeshInstance3D" type="MeshInstance3D" parent="RigidBody3D"]
material_override = SubResource( 34 )
mesh = SubResource( 35 )

[node name="Line3D" type="Node3D" parent="RigidBody3D"]
script = ExtResource( 2 )
material = SubResource( 31 )
points = PackedVector3Array( 0, 0, 0, 1.074, 0, 0 )

[node name="RigidBody2" type="RigidBody3D" parent="."]
transform = Transform3D( 0.942694, 0.333659, 0, -0.333659, 0.942694, 0, 0, 0, 1, 5.26959, 8.46232, 5.28869 )
mode = 1
can_sleep = false

[node name="CollisionShape3D" type="CollisionShape3D" parent="RigidBody2"]
shape = SubResource( 10 )

[node name="MeshInstance3D" type="MeshInstance3D" parent="RigidBody2"]
mesh = SubResource( 33 )

[node name="MeshInstance2" type="MeshInstance3D" parent="."]
transform = Transform3D( -3.29765e-08, -0.583896, 0.811829, 1.50819e-07, 0.811829, 0.583896, -1, 1.41694e-07, 6.12914e-08, -5.35959, 9.02738, -0.218791 )
visible = false
material_override = SubResource( 18 )
mesh = SubResource( 22 )
material/0 = SubResource( 18 )

[node name="RigidBody3" type="RigidBody3D" parent="."]
transform = Transform3D( 0.2, 0, 0, 0, 1, 0, 0, 0, 3, -1.50901, 12.1068, 0 )
mode = 1
mass = 500.0
can_sleep = false

[node name="MeshInstance3" type="MeshInstance3D" parent="RigidBody3"]
mesh = SubResource( 19 )
skeleton = NodePath("../..")

[node name="CollisionShape3D" type="CollisionShape3D" parent="RigidBody3"]
shape = SubResource( 20 )

[node name="OmniLight3D" type="OmniLight3D" parent="."]
transform = Transform3D( 1, 0, 0, 0, 1, 0, 0, 0, 1, -2.38419e-07, 4.29619, -2.39214 )
visible = false
shadow_enabled = true
omni_range = 12.6026

[node name="Trail3D" type="Node3D" parent="."]
transform = Transform3D( -0.321541, -0.946734, 0.0173914, 0.916678, -0.31583, -0.244843, 0.237294, -0.0627848, 0.969406, 0.154614, 3.80043, -5.5822 )
script = ExtResource( 4 )
max_points = 23
damping = 0.493
material = SubResource( 27 )

[node name="Line3D" type="Node3D" parent="."]
transform = Transform3D( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 4.27101, 0 )
visible = false
script = ExtResource( 2 )
material = SubResource( 29 )
points = PackedVector3Array( 0, 0, 0, 1.341, 0, 0 )

[node name="Line3D2" type="Node3D" parent="."]
transform = Transform3D( 1, 0, 0, 0, 1, 0, 0, 0, 1, 3.72529e-09, 5.64986, 0 )
script = ExtResource( 2 )
material = SubResource( 37 )
points = PackedVector3Array( 0, 0, 0, 4, 0, 0 )

[node name="LinePath3D" type="Path3D" parent="."]
transform = Transform3D( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.226341, 6.81151, -0.413063 )
curve = SubResource( 38 )
script = ExtResource( 3 )
material = SubResource( 39 )
