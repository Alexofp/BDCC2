[gd_scene load_steps=61 format=3 uid="uid://bk6p2ir23a777"]

[ext_resource type="Environment" uid="uid://dd5bpvybxmy6u" path="res://addons/godot-polyliner/demos/default_env.tres" id="1"]
[ext_resource type="Script" uid="uid://c5hjcvle5vwk8" path="res://addons/godot-polyliner/Line3D/LinePath3D.gd" id="3"]
[ext_resource type="Script" uid="uid://bjbjcq1a3pw3e" path="res://addons/godot-polyliner/Trail3D/Trail3D.gd" id="4"]
[ext_resource type="Shader" uid="uid://c30na0obdky88" path="res://addons/godot-polyliner/shaders/line_pbr.tres" id="4_12q1m"]
[ext_resource type="Shader" uid="uid://bpkesrnyx2hr5" path="res://addons/godot-polyliner/shaders/line_fade.tres" id="5_kk3ms"]
[ext_resource type="Shader" uid="uid://bjh0b3iluinm2" path="res://addons/godot-polyliner/shaders/parallax/raymarch_rope.gdshader" id="6"]
[ext_resource type="Shader" uid="uid://cmstyf5y41ysg" path="res://addons/godot-polyliner/shaders/parallax/raymarch_ticker.gdshader" id="6_5q0jx"]
[ext_resource type="Shader" uid="uid://durlvj8162pxu" path="res://addons/godot-polyliner/shaders/line_dashed.tres" id="7_reh8s"]
[ext_resource type="Shader" uid="uid://c2c7sknvw28nm" path="res://addons/godot-polyliner/shaders/line_glow.tres" id="8_c1yqp"]
[ext_resource type="Shader" uid="uid://d21ihss8jvhqy" path="res://addons/godot-polyliner/shaders/parallax/raymarch_xmaslightbulbs.gdshader" id="8_fk2di"]
[ext_resource type="Shader" uid="uid://mddj3yvtsb0w" path="res://addons/godot-polyliner/shaders/line_arrow.tres" id="8_icgv3"]
[ext_resource type="Shader" uid="uid://cfqbltjpc442b" path="res://addons/godot-polyliner/shaders/line_foglaser.tres" id="9_3gsv1"]
[ext_resource type="Shader" uid="uid://bpw7xxrpt025i" path="res://addons/godot-polyliner/shaders/parallax/raymarch_driverpassenger.gdshader" id="9_rawnu"]
[ext_resource type="Shader" uid="uid://dno2b0s1fv77i" path="res://addons/godot-polyliner/shaders/parallax/raymarch_xmasgarland.tres" id="10_gpltd"]
[ext_resource type="Shader" uid="uid://eyiae72cpwot" path="res://addons/godot-polyliner/shaders/parallax/raymarch_chain.gdshader" id="11"]

[sub_resource type="GDScript" id="1"]
script/source = "@tool
extends Node3D

@export var mul = 1.0
@export var xmul = 1.0

var timer = 0.0
var xtimer = 0.0
func _process(delta):
	timer += delta*mul
	xtimer += delta*xmul
#	rotation.x = sin(timer)*PI
	rotation.y = fmod(xtimer,TAU)
	position.x = sin(timer)*0.4
#	rotation.y = sin(timer)*1.5+1.2
"

[sub_resource type="ShaderMaterial" id="11"]
render_priority = 0
shader = ExtResource("6")
shader_parameter/line_width = 0.055
shader_parameter/color = Color(1, 1, 0.501961, 1)
shader_parameter/aspect = 2.0
shader_parameter/stretch = true
shader_parameter/ao_samples = 4.0

[sub_resource type="StandardMaterial3D" id="35"]
metallic = 1.0
roughness = 0.31

[sub_resource type="SphereMesh" id="36"]
material = SubResource("35")

[sub_resource type="Curve3D" id="6"]
bake_interval = 0.01
_data = {
"points": PackedVector3Array(-0.681473, 0.501452, 0.0499668, -0.0453298, -0.808289, -0.422336, -0.287503, 1.98422, 3.27149, -0.0263753, -0.319308, 0.277562, 0, 0, 0, -0.702265, 1.97101, 1.42616, -0.404719, -0.395793, 0.304124, 0.250978, -0.285766, -0.20488, -0.182462, 1.93592, 0.452959, -0.0293496, 0.00787398, 0.0273083, 0.0364196, -0.00977075, -0.0338867, 0.778996, 1.91667, -0.265536, -0.465314, 0.0219152, 0.559101, 0.465314, -0.0219152, -0.559101, 1.30247, 0.0139077, -0.142204, -0.690027, -0.0455682, 0.313123, 0.690027, 0.0455682, -0.313123, 2.45674, -0.0354496, -0.813197),
"tilts": PackedFloat32Array(0, 0, 0, 0, 0, 0)
}
point_count = 6

[sub_resource type="ShaderMaterial" id="7"]
render_priority = 0
shader = ExtResource("4_12q1m")
shader_parameter/line_width = 0.05
shader_parameter/tangent_facing = false
shader_parameter/rounded = true
shader_parameter/tube_normal = true
shader_parameter/uv_matches_width = true
shader_parameter/tex_scale = Vector2(1, 1)
shader_parameter/tex_stretch = true
shader_parameter/color = Color(0.164706, 0.164706, 0.164706, 1)
shader_parameter/metallic = 0.0
shader_parameter/specular = 0.5
shader_parameter/roughness = 0.5

[sub_resource type="Curve3D" id="8"]
bake_interval = 0.01
_data = {
"points": PackedVector3Array(0.21395, -1.21304, -0.0335207, -0.21395, 1.21304, 0.0335207, -0.55582, 0.135384, 0.985799, 0.010679, 1.05351, -0.127781, -0.010679, -1.05351, 0.127781, 0.0316888, 0.258686, -0.390028),
"tilts": PackedFloat32Array(0, 0)
}
point_count = 2

[sub_resource type="ShaderMaterial" id="9"]
render_priority = 0
shader = ExtResource("5_kk3ms")
shader_parameter/line_width = 0.4
shader_parameter/tangent_facing = true
shader_parameter/tangent_offset = 0.5
shader_parameter/color = Color(1, 1, 1, 1)
shader_parameter/alpha_curve = 0.5

[sub_resource type="Curve3D" id="10"]
bake_interval = 0.1
_data = {
"points": PackedVector3Array(-0.314905, 1.41452, 0.0695871, 0.314905, -1.41452, -0.0695871, -0.2527, 1.27615, -0.198765, 0, 0, 0, 0, 0, 0, 3.777, 1.04701, -0.188479),
"tilts": PackedFloat32Array(0, 0)
}
point_count = 2

[sub_resource type="ShaderMaterial" id="ShaderMaterial_eq0cb"]
render_priority = 0
shader = ExtResource("6_5q0jx")
shader_parameter/line_width = 0.05
shader_parameter/aspect = 1.0
shader_parameter/stretch = false

[sub_resource type="ShaderMaterial" id="ShaderMaterial_5byre"]
render_priority = 0
shader = ExtResource("7_reh8s")
shader_parameter/line_width = 0.01
shader_parameter/rounded = true
shader_parameter/color = Color(1, 1, 0.513726, 1)
shader_parameter/antline_percent = 0.5
shader_parameter/antline_scroll = 1.0
shader_parameter/antline_scale = 0.5

[sub_resource type="ShaderMaterial" id="ShaderMaterial_he72r"]
render_priority = 0
shader = ExtResource("8_icgv3")
shader_parameter/line_width = 0.1
shader_parameter/color = Color(1, 1, 1, 1)
shader_parameter/stem_size = 0.3
shader_parameter/peak_aspect = 0.1
shader_parameter/double_sided = true
shader_parameter/flip_direction = false

[sub_resource type="ShaderMaterial" id="ShaderMaterial_tc703"]
render_priority = 0
shader = ExtResource("9_3gsv1")
shader_parameter/line_width = 0.01
shader_parameter/world_size = 8.0
shader_parameter/exposure = 8.87
shader_parameter/white_glow = 0.37
shader_parameter/color = Color(1, 0, 0, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_qq25h"]
render_priority = 0
shader = ExtResource("6")
shader_parameter/line_width = 0.056
shader_parameter/color = Color(1, 1, 0.501961, 1)
shader_parameter/aspect = 4.0
shader_parameter/stretch = true
shader_parameter/ao_samples = 4.0

[sub_resource type="ShaderMaterial" id="57"]
render_priority = 0
shader = ExtResource("11")
shader_parameter/twirl_aspect = 0.5
shader_parameter/extra_angle = 0.0
shader_parameter/line_width = 0.027
shader_parameter/link_radius = 0.15
shader_parameter/link_thickness = 0.05
shader_parameter/repeat_size = 1.0
shader_parameter/repeat_size_b = 0.1
shader_parameter/roughness = 0.25
shader_parameter/metallic = 1.0
shader_parameter/color = Color(0.9, 0.9, 0.9, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_g5nd2"]
render_priority = 0
shader = ExtResource("8_fk2di")
shader_parameter/line_width = 0.05
shader_parameter/twirl_aspect = 0.5
shader_parameter/angle = 0.0
shader_parameter/repeat_size = 0.085
shader_parameter/rot_angle = 0.0
shader_parameter/rot_period = 2.49
shader_parameter/roughness = 0.5
shader_parameter/color = Color(0.1, 0.1, 0.1, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_52kpf"]
render_priority = 0
shader = ExtResource("9_rawnu")
shader_parameter/line_width = 0.05
shader_parameter/twirl_aspect = 0.5
shader_parameter/circle_margin = 2.0
shader_parameter/angle = 0.0
shader_parameter/repeat_size = 1.0
shader_parameter/rot_angle = 0.0
shader_parameter/rot_period = 1.38
shader_parameter/roughness = 0.5
shader_parameter/color = Color(1, 0.1, 1, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_be6ii"]
render_priority = 0
shader = ExtResource("10_gpltd")
shader_parameter/line_width = 0.02
shader_parameter/stretch = 0.39
shader_parameter/angle = 0.0
shader_parameter/repeat_size = 0.02
shader_parameter/spokes = 1.0
shader_parameter/rot_angle = 0.0
shader_parameter/rot_period = 3.521
shader_parameter/roughness = 1.0
shader_parameter/color = Color(0.1, 0.2, 0.1, 1)
shader_parameter/g_color = Color(0.3, 0.6, 0.3, 1)

[sub_resource type="Curve3D" id="Curve3D_s2qhu"]
bake_interval = 0.01
_data = {
"points": PackedVector3Array(0, 0, 0, 0, 0, 0, -0.691932, -0.210221, -0.298547, 1.74442, 0.0206528, 1.6599, -1.74442, -0.0206528, -1.6599, 0.956513, -0.197345, -2.96823, 0, 0, 0, 0, 0, 0, -2.90946, -0.202461, -2.4965),
"tilts": PackedFloat32Array(0, 0, 0)
}
point_count = 3

[sub_resource type="Shader" id="Shader_kmium"]
code = "shader_type spatial;
render_mode skip_vertex_transform;
render_mode depth_draw_always;
//render_mode alpha_to_coverage_and_one;

#include \"res://addons/godot-polyliner/shaders/include/polyliner_inc.gdshaderinc\"

uniform float line_width = 0.03;
uniform sampler2D width_curve : source_color;
uniform bool tangent_facing = false;
uniform bool rounded = false;
uniform bool tube_normal = true;

uniform bool uv_matches_width = true;
uniform vec2 tex_scale = vec2(1.0,1.0);

varying float is_end;
void vertex(){
	VERTEX = (MODELVIEW_MATRIX * vec4(VERTEX,1.0)).xyz;
	TANGENT = normalize(cross(NORMAL,rotation3dX(0.0)*vec3(0.0,1.0,0.0)));
	NORMAL = mat3(MODELVIEW_MATRIX) * NORMAL;
	TANGENT = mat3(MODELVIEW_MATRIX) * TANGENT;
	
	quick_line(line_width, rounded, tangent_facing);
	
	if (uv_matches_width) { UV.x /= line_width; }
	
	UV.x = 1.0-UV.x;
	
	float line_length = UV2.x;
	UV2 = UV;
	UV2.x *= line_length;
	
	// correct the texture coordinates at the rounded ends
	// TODO: doesn't take angle of the rounded end into account at all
	if (rounded) {
		// the world may never know
		// why 1.414 is the exact value which fixes the texcoords
		const float SQ2 = sqrt(2.0);
		float uv_correct = -is_end;
		
		if (uv_matches_width) { uv_correct *= line_width*SQ2; } 
		else { uv_correct *= line_width/abs(tex_scale.x); }
//		if (abs(is_end) > 0.001) {
//			float i = acos(dot(TANGENT,normalize(cross(NORMAL,normalize(VERTEX)))));
//			float xe = 1.0/(i*0.5+0.5);
//			uv_correct *= xe*abs(tex_scale.x);
//		}
		UV.x += uv_correct;
		UV2.x += uv_correct;
	}
	
	// godot seems to reapply the modelview transform later
	// we have no choice but to do the inverse transform
	// af1d81d fixes this
	TANGENT =  TANGENT * mat3(MODELVIEW_MATRIX);
	BINORMAL = BINORMAL * mat3(MODELVIEW_MATRIX);
}

uniform sampler2D texture_alb : hint_default_white, source_color;
uniform sampler2D texture_rgh : hint_default_white;
uniform bool tex_stretch = true;

uniform vec4 color : source_color = vec4(vec3(1.0),1.0);
uniform float metallic  : hint_range(0.0,1.0,0.005) = 0.0;
uniform float specular  : hint_range(0.0,1.0,0.005) = 0.5;
uniform float roughness : hint_range(0.0,1.0,0.005) = 0.5;
uniform float layerrr = 100.0;

vec3 texview_arbitrary(vec2 uv, vec3 vertex, vec3 normal) {
	vec3 viewPosition = -normalize(vertex); // Godot has this as VIEW
	vec2 texDx = dFdx( uv );
	vec2 texDy = dFdy( uv );
	vec3 vSigmaX = dFdx( vertex );
	vec3 vSigmaY = dFdy( vertex );
	vec3 vR1 = cross( vSigmaY, normal );
	vec3 vR2 = cross( normal, vSigmaX );
	float fDet = dot( vSigmaX, vR1 );
	vec2 vProjVscr = ( 1.0 / fDet ) * vec2( dot( vR1, viewPosition ), dot( vR2, viewPosition ) );
	vec3 vProjVtex;
	vProjVtex.xy = texDx * vProjVscr.x + texDy * vProjVscr.y;
	vProjVtex.z = dot( normal, viewPosition );
	return vProjVtex;
}

#define parallax_sample(uv) (smoothstep(0.5,0.0,texture(dispMap,uv).r))

vec2 parallax_tex(sampler2D dispMap,vec2 uv,float depth,
		vec3 VERT, vec3 NORM, vec3 TANG) {
	vec3 vProjVtex = texview_arbitrary(uv,VERT,NORM);
	
	const float minLayers = 5.0;
	float layers = mix(100.0,minLayers,max(dot(vec3(0.0,0.0,1.0),NORM),0.0));
	
	float layer_dist = 1.0/layers;
	
	float current_depth = 0.0;
	
	vec2 p = (vProjVtex.xy/vProjVtex.z)*(depth*0.05); 
	vec2 deltaTexCoords = p * layer_dist;
	
	float height = parallax_sample(uv);
	while(current_depth < height){
		current_depth += layer_dist;
		uv -= deltaTexCoords;
		height = parallax_sample(uv);
	}
	vec2 newv = uv + deltaTexCoords;
	float afterDepth  = height - current_depth;
	float beforeDepth = parallax_sample(newv) - current_depth + layer_dist;

	float weight = afterDepth / (afterDepth - beforeDepth);
//	weight -= ((hash12(noiseUV))-0.5);
	uv = newv * weight + uv * (1.0 - weight);
	
	return uv;
}

void fragment() {
	
	
	if (!FRONT_FACING) { NORMAL = -NORMAL; }
	
	if (tube_normal && !tangent_facing) { 
		NORMAL_MAP = getLineTubeNormal(UV,is_end,rounded);
	}
	
	if (rounded && abs(is_end) > 0.0001) {
		// pure heuristics
		float softner = magic_aa(6000.0,VERTEX,VIEWPORT_SIZE);
		softner *= (1.0/line_width) * (min(abs(is_end)*2.0,1.0));
		ALPHA *= smoothstep(1.0,1.0+softner,getDistToLineCenter(UV,is_end));
	}
	
	vec2 uv_alb = UV2;
	if (tex_stretch) {
		uv_alb = UV;
	}
	uv_alb *= tex_scale;
	
	uv_alb = uv_alb.yx; // more intuitive
	uv_alb = parallax_tex(texture_alb,uv_alb,(sin(TIME)*0.5+0.5)*4.0,VERTEX,NORMAL,TANGENT);
	
	vec4 alb_sample = texture(texture_alb,uv_alb);
	vec4 rgh_sample = texture(texture_rgh,uv_alb);
	
	ALBEDO = alb_sample.rgb * alb_sample.a * color.rgb;
	SPECULAR = specular;
	ROUGHNESS = roughness * rgh_sample.r;
	METALLIC = metallic;
	
	ALPHA_SCISSOR_THRESHOLD = 0.001; // comment out for alpha blending
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_a854b"]
render_priority = 0
shader = SubResource("Shader_kmium")

[sub_resource type="Curve3D" id="32"]
bake_interval = 1.67
_data = {
"points": PackedVector3Array(0, 0, 0, 0, 0, 0, -0.19442, 0.0866818, -1.76063, 2.33724, -1.66999, -3.70093, -2.33724, 1.66999, 3.70093, -0.721755, 2.50279, -5.27716, 1.3031, -0.628219, -3.35566, -1.3031, 0.628219, 3.35566, -0.0607967, 0.469147, 0.81765, 0.0347347, -1.44808, 3.20064, -0.0347347, 1.44808, -3.20064, -2.29411, 5.39076, -1.00783, 0.0524731, 1.97994, -1.77644, -0.0524731, -1.97994, 1.77644, -0.539491, 1.55789, -3.2768, 0.282413, -0.803169, -1.42656, -0.282413, 0.803169, 1.42656, -2.56665, 1.06918, 2.91711, -3.40217, 2.63917, 1.69681, 0, 0, 0, 0.500399, 4.02992, 2.0358),
"tilts": PackedFloat32Array(0, 0, 0, 0, 0, 0, 0)
}
point_count = 7

[sub_resource type="ShaderMaterial" id="33"]
render_priority = 0
shader = ExtResource("8_c1yqp")
shader_parameter/line_width = 0.0
shader_parameter/glow_width = 0.4
shader_parameter/tangent_facing = false
shader_parameter/rounded = true
shader_parameter/color = Color(0, 0.4, 1, 1)
shader_parameter/glow_curve = 0.05

[sub_resource type="Curve3D" id="12"]
bake_interval = 0.13
_data = {
"points": PackedVector3Array(0, 0, 0, 0, 0, 0, 0.0133251, 0.052581, -0.315982, -0.000402212, -0.0114647, 0.125075, 0, 0, 0, -0.0649302, 0.0867756, -0.676741, 0.0406693, -0.314836, 0.00211489, -0.0406693, 0.314836, -0.00211489, -0.0292743, 0.402122, -0.924479, 0, 0, 0, 0, 0, 0, 0.253769, 1.67101, -0.867928),
"tilts": PackedFloat32Array(0, 0, 0, 0)
}
point_count = 4

[sub_resource type="Curve" id="Curve_3airw"]
_data = [Vector2(0, 0), 0.0, 0.0, 0, 0, Vector2(1, 1), 0.0, 0.0, 0, 0]
point_count = 2

[sub_resource type="CurveTexture" id="CurveTexture_ovms4"]
texture_mode = 1
curve = SubResource("Curve_3airw")

[sub_resource type="ShaderMaterial" id="13"]
render_priority = 0
shader = ExtResource("4_12q1m")
shader_parameter/line_width = 0.045
shader_parameter/width_curve = SubResource("CurveTexture_ovms4")
shader_parameter/tangent_facing = false
shader_parameter/rounded = true
shader_parameter/tube_normal = true
shader_parameter/uv_matches_width = true
shader_parameter/tex_scale = Vector2(1, 1)
shader_parameter/tex_stretch = true
shader_parameter/color = Color(0.0627451, 0.0627451, 0.0627451, 1)
shader_parameter/metallic = 0.0
shader_parameter/specular = 0.5
shader_parameter/roughness = 0.41

[sub_resource type="Curve3D" id="14"]
bake_interval = 0.23
_data = {
"points": PackedVector3Array(0.0188306, 0.573898, -0.946725, 0, 0, 0, -0.0320193, 0.0871031, -0.953465, 0, 0, 0, 0, 0, 0, 0.252816, 1.61824, -0.898806),
"tilts": PackedFloat32Array(0, 0)
}
point_count = 2

[sub_resource type="Curve3D" id="15"]
bake_interval = 0.1
_data = {
"points": PackedVector3Array(0, 0, 0, 0, 0, 0, -0.0320193, 0.0871031, -0.953465, 0.0287427, 0.147746, -0.154159, -0.0287427, -0.147746, 0.154159, 0.253769, 1.67101, -0.867928, 0.149462, 0.490598, -0.0296789, -0.149462, -0.490598, 0.0296789, 0.0705009, 0.543522, -0.505148, -0.0499868, -0.522727, -0.0048691, 0.0499868, 0.522727, 0.0048691, -0.00451469, 0.498086, -0.147836, 0, 0, 0, 0, 0, 0, 0.265312, 1.69012, -0.114367),
"tilts": PackedFloat32Array(0, 0, 0, 0, 0)
}
point_count = 5

[sub_resource type="Curve3D" id="16"]
bake_interval = 0.02
_data = {
"points": PackedVector3Array(0.0176462, -0.073627, -0.07069, -0.0176462, 0.073627, 0.07069, 0.253769, 1.67101, -0.867928, -0.01461, 0.0929933, -0.0135185, 0.01461, -0.0929933, 0.0135185, 0.286338, 1.59172, -0.0273314, -0.0135941, 0.0593202, 0.0485303, 0.0135941, -0.0593202, -0.0485303, 0.116213, 1.51794, -0.782843, -0.00480502, 0.0413738, -0.0287494, 0.00480502, -0.0413738, 0.0287494, 0.112959, 1.13225, -0.854356, -0.00272521, 0.0478554, 0.00204782, 0.00272521, -0.0478554, -0.00204782, 0.188027, 1.12903, -0.189822, 0.0268822, 0.171594, 0.00298178, -0.0268822, -0.171594, -0.00298178, 0.0865254, 0.881009, -0.823246, -0.0100646, 0.208581, 0.0197082, 0.0100646, -0.208581, -0.0197082, -0.0294416, 0.317601, -0.856148, -0.0878368, 0.129924, -0.0854087, 0.0878368, -0.129924, 0.0854087, 0.0404086, -0.00266546, -0.0718503, 0.00638366, -0.00244647, 0.136213, -0.00638366, 0.00244647, -0.136213, -0.00573421, 0.0114359, -0.767331, -0.00999196, -0.141455, -0.012406, 0.00999196, 0.141455, 0.012406, -0.00607419, 0.194976, -0.960631, 0.0176462, -0.073627, -0.07069, -0.0176462, 0.073627, 0.07069, 0.253769, 1.67101, -0.867928),
"tilts": PackedFloat32Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
}
point_count = 11

[sub_resource type="Curve3D" id="17"]
bake_interval = 0.04
_data = {
"points": PackedVector3Array(0, 0, 0, 0, 0, 0, -0.0121326, 1.08994, -0.0818059, 0.000700951, 0.173404, 0.00882459, -0.000700951, -0.173404, -0.00882459, 0.0211658, 0.821217, 0.311295, -0.00398445, 0.0413077, -0.00030303, 0.00398445, -0.0413077, 0.00030303, 0.00453615, 0.568758, -0.118173, 0.0099864, 0.132196, -0.00262773, -0.0099864, -0.132196, 0.00262773, -0.00528383, 0.285946, 0.27282, 0, 0, 0, 0, 0, 0, -0.00420463, -0.0685405, -0.0932269),
"tilts": PackedFloat32Array(0, 0, 0, 0, 0)
}
point_count = 5

[sub_resource type="Curve3D" id="18"]
bake_interval = 0.02
_data = {
"points": PackedVector3Array(-0.00588179, -0.0163611, 0.166676, 0.00588179, 0.0163611, -0.166676, 0.111722, 0.0532196, -0.272097, -0.052846, -0.227517, -0.0213231, 0.052846, 0.227517, 0.0213231, 0.143549, 0.39558, -0.336998, -0.0788579, -0.33897, -0.0257099, 0.0788579, 0.33897, 0.0257099, 0.245285, 1.13839, -0.24489, -0.031877, 0.583704, -0.00689557, 0.031877, -0.583704, 0.00689557, 0.127718, 0.625811, 0.533192, -0.00588179, -0.0163611, 0.166676, 0.00588179, 0.0163611, -0.166676, 0.111722, 0.0532196, -0.272097),
"tilts": PackedFloat32Array(0, 0, 0, 0, 0)
}
point_count = 5

[sub_resource type="PlaneMesh" id="19"]
size = Vector2(10, 10)

[sub_resource type="Shader" id="23"]
code = "shader_type spatial;
render_mode blend_mix;
render_mode cull_disabled;

varying float lifetime;
varying float alpf;
void vertex(){
	lifetime = INSTANCE_CUSTOM.y*0.01;
	alpf = sin(INSTANCE_CUSTOM.y*3.1415)*0.05;
}
uniform sampler2D noise_tex;
void fragment(){
	BACKLIGHT = vec3(1.0);
	ALBEDO = texture(noise_tex,UV+lifetime).rgb;
	ALPHA = alpf;
}"

[sub_resource type="FastNoiseLite" id="24"]

[sub_resource type="NoiseTexture2D" id="25"]
seamless = true
noise = SubResource("24")

[sub_resource type="ShaderMaterial" id="26"]
render_priority = 0
shader = SubResource("23")
shader_parameter/noise_tex = SubResource("25")

[sub_resource type="QuadMesh" id="27"]
material = SubResource("26")
size = Vector2(12, 4)

[sub_resource type="QuadMesh" id="28"]

[sub_resource type="Shader" id="Shader_4y0tk"]
code = "shader_type spatial;
render_mode skip_vertex_transform, cull_disabled;
render_mode unshaded;
//render_mode blend_add;

#include \"include/polyliner_inc.gdshaderinc\"

// Shader for swooshy sword effects.
// Only really makes sense to use this
// with Tangent Facing enabled

uniform float line_width = 0.4;
uniform sampler2D width_curve : source_color;
uniform bool tangent_facing = true;
uniform float tangent_offset = 0.5;

void vertex() {
	VERTEX = (MODELVIEW_MATRIX * vec4(VERTEX,1.0)).xyz;
	NORMAL = mat3(MODELVIEW_MATRIX) * NORMAL;
	TANGENT = mat3(MODELVIEW_MATRIX) * TANGENT;
	
	float is_end;
	quick_line(line_width,false);
	
	VERTEX += TANGENT * tangent_offset;
}

uniform vec4 color : source_color = vec4(vec3(1.0),1.0);
uniform float alpha_curve : hint_range(0.0,1.0,0.005) = 0.5;
void fragment(){
	NORMAL = FRONT_FACING ? NORMAL : -NORMAL;
	float thing = smoothstep(1.0,0.0,UV.x);
	thing = 1.0-pow(thing,alpha_curve);
	ALPHA = thing;
	ALBEDO = mix(color.rgb,vec3(1.0),thing);
}"

[sub_resource type="ShaderMaterial" id="39"]
render_priority = 0
shader = SubResource("Shader_4y0tk")

[sub_resource type="Shader" id="40"]
code = "shader_type spatial;
render_mode skip_vertex_transform, cull_disabled;
render_mode depth_draw_opaque;

uniform float line_width = 0.1;
uniform bool tangent_facing = false;
uniform bool rounded = false;
float line_process(float width, inout vec3 vertex, vec3 dir_to_cam, vec2 uv,
					inout vec3 normal, inout vec3 tangent){
	vec3 dir_to_next_point = normal;
	vec3 perp = tangent;
	if (!tangent_facing) {
		perp = normalize(cross(dir_to_cam,dir_to_next_point));
	}
	
	float is_end = 0.5-uv.x;
	is_end = float(abs(is_end) > 0.5) * -sign(is_end);
	vec3 rounder = vec3(0.0); 
	if (rounded) { 
		rounder = is_end * normalize(cross(perp,dir_to_cam));
	}

	float side = sign(float(uv.y > 0.5)-0.5);
	vertex += ((perp*side)-rounder) * width;
	
	tangent = perp;
	normal = cross(perp,dir_to_next_point);
	
	return is_end;
}

varying float is_end;
void vertex(){
	VERTEX = (MODELVIEW_MATRIX * vec4(VERTEX,1.0)).xyz;
	NORMAL = mat3(MODELVIEW_MATRIX) * NORMAL;
	TANGENT = mat3(MODELVIEW_MATRIX) * TANGENT;
	
	is_end = line_process(line_width,VERTEX,normalize(VERTEX),UV2,NORMAL,TANGENT);
	
	BINORMAL = cross(TANGENT,NORMAL);
	if (rounded) {
		float uv_correct = is_end*line_width;
		UV.x += uv_correct;
		UV2.x += uv_correct;
	}
}

float getDistToLineCenter(vec2 uv) {
	vec2 c = vec2(is_end*0.5,uv.y-0.5);
	return length(c);
}

float getDistSquaredToLineCenter(vec2 uv) {
	vec2 c = vec2(is_end*0.5,uv.y-0.5);
	return dot(c,c);
}

vec2 getLineTubeNormal(vec2 uv) {
	vec2 n = vec2(0.5);
		n.x = uv.y;
		if (rounded) {
			n.y = is_end*0.5+0.5;
		}
	return n;
}

uniform vec4 color : source_color = vec4(vec3(1.0),1.0);
uniform float metallic  : hint_range(0.0,1.0,0.005) = 0.0;
uniform float specular  : hint_range(0.0,1.0,0.005) = 0.5;
uniform float roughness : hint_range(0.0,1.0,0.005) = 0.5;
void fragment() {
	if (!FRONT_FACING) { NORMAL = -NORMAL; }
	
	if (!tangent_facing) { NORMAL_MAP.xy = getLineTubeNormal(UV2); }
	
	
	if (rounded) {
		if (abs(is_end) > 0.0) {
			ALPHA *= smoothstep(1.0,0.95,getDistSquaredToLineCenter(UV)*4.0);
		}
	}
	
	ALBEDO = color.rgb;
	SPECULAR = specular;
	ROUGHNESS = roughness;
	METALLIC = metallic;
	
	ALPHA_SCISSOR_THRESHOLD = 0.001; // uncomment for alpha blending
}"

[sub_resource type="ShaderMaterial" id="41"]
render_priority = 0
shader = SubResource("40")
shader_parameter/line_width = 0.054
shader_parameter/tangent_facing = false
shader_parameter/rounded = false
shader_parameter/color = Color(1, 1, 1, 1)
shader_parameter/metallic = 0.0
shader_parameter/specular = 0.5
shader_parameter/roughness = 0.5

[sub_resource type="Curve3D" id="42"]
_data = {
"points": PackedVector3Array(-0.376543, 0.347183, -0.131945, 0.376543, -0.347183, 0.131945, -1.08351, 0.776258, -1.53599, -0.634989, -0.754262, -0.378784, 0.634989, 0.754262, 0.378784, 0.437512, 0.882522, 0.619004),
"tilts": PackedFloat32Array(0, 0)
}
point_count = 2

[sub_resource type="ShaderMaterial" id="52"]
render_priority = 0
shader = ExtResource("11")
shader_parameter/twirl_aspect = 0.5
shader_parameter/extra_angle = 0.0
shader_parameter/line_width = 0.025
shader_parameter/link_radius = 0.15
shader_parameter/link_thickness = 0.05
shader_parameter/repeat_size = 1.0
shader_parameter/repeat_size_b = 0.1
shader_parameter/roughness = 0.25
shader_parameter/metallic = 1.0
shader_parameter/color = Color(0.1, 0.1, 0.1, 1)

[node name="Node3D" type="Node3D"]

[node name="wormspinner" type="Node3D" parent="."]
transform = Transform3D(-0.265037, 0, 0.964229, 0, 0.999999, 0, -0.964223, 0, -0.265039, 0.136397, 0.016, 3.531)
script = SubResource("1")
mul = 1.59

[node name="worm" type="Node3D" parent="wormspinner"]
transform = Transform3D(1.47814e-08, 0.338162, -0.941088, 1, -4.37114e-08, -4.41775e-14, -4.11363e-08, -0.941088, -0.338162, 0.636846, 0.0686262, 0.206937)
script = ExtResource("4")
max_points = 150
material = SubResource("11")

[node name="MeshInstance2" type="MeshInstance3D" parent="wormspinner/worm"]
transform = Transform3D(0.05, 4.44089e-16, -1.11022e-16, 0, 0.05, 0, -2.35922e-16, -1.39698e-09, 0.05, 0.0469999, 0, 0.033)
mesh = SubResource("36")

[node name="MeshInstance3" type="MeshInstance3D" parent="wormspinner/worm"]
transform = Transform3D(0.05, 0, 0, 0, 0.05, 0, 0, 0, 0.05, 0.047, 0, -0.026)
mesh = SubResource("36")

[node name="wire" type="Path3D" parent="."]
transform = Transform3D(-0.422618, 0, 0.906308, 0, 1, 0, -0.906308, 0, -0.422618, 1.0615, 0.0552319, 3.14501)
curve = SubResource("6")
script = ExtResource("3")
iter_min_dist = 0.077
material = SubResource("7")

[node name="wireframe" type="Path3D" parent="."]
transform = Transform3D(0.991497, 0, 0.130128, 0, 1, 0, -0.130128, 0, 0.991497, -0.815953, 0.738032, 3.27186)
curve = SubResource("8")
script = ExtResource("3")
iter_add_last_point = false
material = SubResource("9")

[node name="rope8" type="Path3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.0964948, 0.2, 0.623746)
curve = SubResource("10")
script = ExtResource("3")
curve_mode = 1
iter_add_last_point = false
material = SubResource("ShaderMaterial_eq0cb")

[node name="dashed" type="Path3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.0964948, 0.2, -2.47625)
curve = SubResource("10")
script = ExtResource("3")
curve_mode = 1
iter_add_last_point = false
material = SubResource("ShaderMaterial_5byre")

[node name="arrow" type="Path3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.0964948, 0.2, -3.27625)
curve = SubResource("10")
script = ExtResource("3")
iter_add_last_point = false
material = SubResource("ShaderMaterial_he72r")

[node name="arrow2" type="Path3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.0964948, 0.2, -4.07625)
curve = SubResource("10")
script = ExtResource("3")
iter_add_last_point = false
material = SubResource("ShaderMaterial_tc703")

[node name="rope" type="Path3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.0964948, 0.2, -0.277496)
curve = SubResource("10")
script = ExtResource("3")
curve_mode = 1
iter_add_last_point = false
material = SubResource("ShaderMaterial_qq25h")

[node name="rope2" type="Path3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.1, 0.151, -0.721456)
curve = SubResource("10")
script = ExtResource("3")
curve_mode = 1
iter_add_last_point = false
uv_size = 1.012
material = SubResource("57")

[node name="rope4" type="Path3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.1, 0.151, -1.22146)
curve = SubResource("10")
script = ExtResource("3")
curve_mode = 1
iter_add_last_point = false
material = SubResource("ShaderMaterial_g5nd2")

[node name="dp" type="Path3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.1, 0.151, -1.62146)
curve = SubResource("10")
script = ExtResource("3")
curve_mode = 1
iter_add_last_point = false
material = SubResource("ShaderMaterial_52kpf")

[node name="rope6" type="Path3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.1, 0.151, -2.02146)
curve = SubResource("10")
script = ExtResource("3")
curve_mode = 1
iter_add_last_point = false
material = SubResource("ShaderMaterial_be6ii")

[node name="rope7" type="Path3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.0964947, 0.2, 0.709972)
curve = SubResource("Curve3D_s2qhu")
script = ExtResource("3")
curve_mode = 1
iter_min_dist = 0.035
iter_add_last_point = false
material = SubResource("ShaderMaterial_a854b")

[node name="glow" type="Path3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -8.05833, 0.672881, 0.492809)
curve = SubResource("32")
script = ExtResource("3")
curve_mode = 1
iter_min_dist = 0.236
material = SubResource("33")

[node name="Node3D" type="Node3D" parent="."]
transform = Transform3D(-2.18557e-08, 0, -0.5, 0, 0.5, 0, 0.5, 0, -2.18557e-08, 1.39, 0.857196, 4.73432)

[node name="Path3" type="Path3D" parent="Node3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.0142488, 0.272145, -0.678472)
curve = SubResource("12")
script = ExtResource("3")
material = SubResource("13")

[node name="Path4" type="Path3D" parent="Node3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.0111256, 0.274852, 0.128072)
curve = SubResource("14")
script = ExtResource("3")
material = SubResource("13")

[node name="Path5" type="Path3D" parent="Node3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.0111256, 0.274852, 0.624882)
curve = SubResource("15")
script = ExtResource("3")
material = SubResource("13")

[node name="Path6" type="Path3D" parent="Node3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.0111256, 0.274852, 1.86555)
curve = SubResource("16")
script = ExtResource("3")
material = SubResource("13")

[node name="Path7" type="Path3D" parent="Node3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.00908566, -1.25051, -0.907288)
curve = SubResource("17")
script = ExtResource("3")
material = SubResource("13")

[node name="Path8" type="Path3D" parent="Node3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.00962734, -1.24589, 0.182642)
curve = SubResource("18")
script = ExtResource("3")
material = SubResource("13")

[node name="2" type="OmniLight3D" parent="Node3D"]
transform = Transform3D(-0.0435529, 0.282734, 1.97944, -0.598798, 1.88719, -0.282734, -1.90776, -0.598798, 0.0435537, 1.14294, 0.783725, -0.465719)
visible = false
light_color = Color(1, 0.94, 1, 1)
light_size = 0.195
shadow_enabled = true
shadow_bias = 0.035
omni_range = 20.0
omni_attenuation = 2.0

[node name="MeshInstance3" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, -0.104476, 0.491065, 5.4924)
mesh = SubResource("19")

[node name="MeshInstance4" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.023256, -0.016975, 0.0210711)
mesh = SubResource("19")

[node name="CPUParticles3D" type="CPUParticles3D" parent="."]
transform = Transform3D(-1, 0, -8.74228e-08, 0, 1, 0, 8.74228e-08, 0, -1, 1.14351, 1.42591, 1.30462)
visible = false
cast_shadow = 0
amount = 64
lifetime = 4.0
mesh = SubResource("27")
emission_shape = 2
emission_sphere_radius = 1.0
spread = 180.0
gravity = Vector3(0, 0, 0)

[node name="3" type="DirectionalLight3D" parent="."]
transform = Transform3D(1, 0, 0, 0, -0.667832, 0.744312, 0, -0.744312, -0.667832, 1.62286, 5.84881, -3.08045)
light_color = Color(1, 0.94, 1, 1)
light_angular_distance = 1.27
shadow_blur = 2.239
directional_shadow_fade_start = 1.0
directional_shadow_max_distance = 20.0
directional_shadow_pancake_size = 10.3

[node name="Camera3D" type="Camera3D" parent="."]
transform = Transform3D(-0.932721, 0, 0.360599, 0, 1, 0, -0.360599, 0, -0.932721, 0.808431, 0.807191, -0.232107)
visible = false

[node name="MeshInstance5" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 2.42868, 0.805756, 2.64459)
visible = false
mesh = SubResource("28")

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = ExtResource("1")

[node name="Trail3D" type="Node3D" parent="."]
transform = Transform3D(0.0465687, -0.818761, -0.572242, -0.986043, 0.0539839, -0.157484, 0.159833, 0.57159, -0.804821, -0.545116, 1.10295, 1.43626)
script = ExtResource("4")
material = SubResource("39")

[node name="Trail3D2" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.55701, 3.18345)
script = ExtResource("4")
damping = 0.738
material = SubResource("41")

[node name="LinePath3D" type="Path3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 2.53022, 1.1862, 3.69593)
curve = SubResource("42")
script = ExtResource("3")
curve_mode = 1
iter_add_last_point = false
material = SubResource("52")

[node name="OmniLight3D" type="OmniLight3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.153023, 1.20027, 3.35399)
visible = false

[node name="OmniLight2" type="OmniLight3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.442994, 0.503658, 2.12577)
visible = false

[node name="OmniLight3" type="OmniLight3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.101659, 0.201528, 1.76163)
visible = false
shadow_enabled = true

[node name="ReflectionProbe" type="ReflectionProbe" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.22816, 1.89413)
visible = false
