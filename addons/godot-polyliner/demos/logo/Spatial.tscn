[gd_scene load_steps=5 format=2]

[ext_resource path="res://addons/godot-polyliner/Line3D/LinePath3D.gd" type="Script" id=1]

[sub_resource type="Curve3D" id=1]
bake_interval = 0.9
_data = {
"points": PackedVector3Array( -0.00480616, -0.137626, 3.36291, 0.00480616, 0.137626, -3.36291, 0.216624, -0.107999, 3.55684, -0.904586, -6.14268, 0.266922, 0.904586, 6.14268, -0.266922, 0.837585, 11.1522, -8.67692 ),
"tilts": PackedFloat32Array( 0, 0 )
}

[sub_resource type="Shader" id=2]
code = "shader_type spatial;
render_mode skip_vertex_transform, cull_disabled;
render_mode depth_draw_opaque;

uniform float line_width = 0.1;
uniform bool tangent_facing = false;
uniform bool rounded = false;
float line_process(float width, inout vec3 vertex, vec3 dir_to_cam, vec2 uv,
					inout vec3 normal, inout vec3 tangent){
	vec3 dir_to_next_point = normal;
	vec3 perp = tangent;
	if (!tangent_facing) {
		perp = normalize(cross(dir_to_cam,dir_to_next_point));
	}
	
	float is_end = 0.5-uv.x;
	is_end = float(abs(is_end) > 0.5) * -sign(is_end);
	vec3 rounder = vec3(0.0); 
	if (rounded) { 
		rounder = is_end * normalize(cross(perp,dir_to_cam));
	}

	float side = sign(float(uv.y > 0.5)-0.5);
	vertex += ((perp*side)-rounder) * width;
	
	tangent = perp;
	normal = cross(perp,dir_to_next_point);
	
	return is_end;
}

uniform bool uv_matches_width = true;

varying float is_end;
void vertex(){
	VERTEX = (MODELVIEW_MATRIX * vec4(VERTEX,1.0)).xyz;
	NORMAL = mat3(MODELVIEW_MATRIX) * NORMAL;
	TANGENT = mat3(MODELVIEW_MATRIX) * TANGENT;
	
	is_end = line_process(line_width,VERTEX,normalize(VERTEX),UV,NORMAL,TANGENT);
	
	BINORMAL = cross(TANGENT,NORMAL);
	
	if (uv_matches_width) {
		UV.x /= line_width;
	}
	
	UV.x = 1.0-UV.x;
	
	float line_length = UV2.x;
//	float uv_correct = UV2.y;
	UV2 = UV;
	UV2.x *= line_length;
	
	if (rounded) {
		float uv_correct = is_end*line_width;
		UV.x += uv_correct;
		UV2.x += uv_correct;
	}
}

float getDistToLineCenter(vec2 uv) {
	vec2 c = vec2(is_end*0.5,uv.y-0.5);
	return length(c)*0.5;
}

float getDistSquaredToLineCenter(vec2 uv) {
	vec2 c = vec2(is_end*0.5,uv.y-0.5);
	return dot(c,c);
}

vec2 getLineTubeNormal(vec2 uv) {
	vec2 n = vec2(0.5);
		n.x = uv.y;
		if (rounded) {
			n.y = (is_end*0.5+0.5);
		}
	return n;
}

uniform sampler2D albedo_tex : source_color;
uniform bool tex_stretch = true;
uniform vec2 tex_scale = vec2(1.0,1.0);

uniform vec4 color : source_color = vec4(vec3(1.0),1.0);
uniform float metallic  : hint_range(0.0,1.0,0.005) = 0.0;
uniform float specular  : hint_range(0.0,1.0,0.005) = 0.5;
uniform float roughness : hint_range(0.0,1.0,0.005) = 0.5;

uniform bool tube_normal = true;
void fragment() {
	if (!FRONT_FACING) { NORMAL = -NORMAL; }
	
	if (tube_normal && !tangent_facing) { NORMAL_MAP.xy = getLineTubeNormal(UV); }
	
	
	if (rounded) {
		if (abs(is_end) > 0.0) {
			ALPHA *= smoothstep(1.0,0.99,getDistToLineCenter(UV)*4.0);
		}
	}
	
	vec2 uv_alb = UV2;
	if (tex_stretch) {
		uv_alb = UV;
	}
	uv_alb *= tex_scale;
	
	vec4 alb_sample = texture(albedo_tex,uv_alb.yx);
	
	ALBEDO = alb_sample.rgb * alb_sample.a * color.rgb;
	SPECULAR = specular;
	ROUGHNESS = roughness;
	METALLIC = metallic;
	
	ALPHA_SCISSOR_THRESHOLD = 0.001; // uncomment for alpha blending
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/line_width = 0.176
shader_param/tangent_facing = false
shader_param/rounded = false
shader_param/uv_matches_width = true
shader_param/tex_stretch = true
shader_param/tex_scale = Vector2( 1, 1 )
shader_param/color = Color( 1, 1, 1, 1 )
shader_param/metallic = 0.0
shader_param/specular = 0.5
shader_param/roughness = 0.5
shader_param/tube_normal = true

[node name="Node3D" type="Node3D"]

[node name="Camera3D" type="Camera3D" parent="."]

[node name="LinePath3D" type="Path3D" parent="."]
transform = Transform3D( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -4 )
curve = SubResource( 1 )
script = ExtResource( 1 )
render_mode = 1
material = SubResource( 3 )
