[gd_scene load_steps=5 format=3 uid="uid://bgebdioo2oc31"]

[sub_resource type="SphereMesh" id="SphereMesh_lhctw"]

[sub_resource type="Shader" id="Shader_saiye"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.3.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform vec3 box_position;  // The center position of the box in world space
uniform vec3 box_size;      // The size (width, height, depth) of the box

void vertex() {
    // Get the world position of the current vertex
    vec3 vertex_position = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz;

    // Calculate the minimum and maximum extents of the box
    vec3 box_min = box_position - box_size * 0.5;
    vec3 box_max = box_position + box_size * 0.5;

    // Distance from the vertex to each face of the box
    vec3 dist_to_box = max(box_min - vertex_position, vertex_position - box_max);
    float signed_distance = length(max(dist_to_box, vec3(0.0)))
                          + min(max(dist_to_box.x, max(dist_to_box.y, dist_to_box.z)), 0.0);

    // Soft collision effect: Apply only if within a certain distance
    float collision_threshold = 0.1; // Adjust for squishiness
	signed_distance = max(signed_distance, -0.01);
    if (signed_distance < collision_threshold) {
        // Calculate the push-back vector
        vec3 push_direction = normalize(vertex_position - box_position);
        
        // Soft collision: The closer the vertex, the stronger the effect
        float intensity = (collision_threshold - signed_distance) / collision_threshold;
        vec3 deformation = push_direction * intensity * collision_threshold;
        
        // Apply deformation to the vertex position
        VERTEX += (inverse(MODEL_MATRIX) * vec4(deformation, 0.0)).xyz;
    }
	
	UV = UV * uv1_scale.xy + uv1_offset.xy;
}

void fragment() {
	vec2 base_uv = UV;

	vec4 albedo_tex = texture(texture_albedo, base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(texture(texture_metallic, base_uv), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(texture(texture_roughness, base_uv), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_y4l71"]
render_priority = 0
shader = SubResource("Shader_saiye")
shader_parameter/albedo = Color(0.53, 0, 0, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/box_position = Vector3(1.5, 0, 0)
shader_parameter/box_size = Vector3(1, 2, 2)

[sub_resource type="BoxMesh" id="BoxMesh_fr0jv"]
size = Vector3(1, 2, 2)

[node name="SDFCollisionTest" type="Node3D"]

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.917408, -0.0786916, -0.26364)
mesh = SubResource("SphereMesh_lhctw")
surface_material_override/0 = SubResource("ShaderMaterial_y4l71")

[node name="MeshInstance3D2" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 1.5, 0, 0)
mesh = SubResource("BoxMesh_fr0jv")
