[gd_scene load_steps=21 format=3 uid="uid://b0l6erkveqgyk"]

[ext_resource type="PackedScene" uid="uid://cw3gpucq3d0vb" path="res://Mesh/Parts/Head/FelineHead/FelineHead.glb" id="1_qhi50"]
[ext_resource type="Script" uid="uid://c4elfen018uyc" path="res://Mesh/Parts/Head/FelineHead/feline_head.gd" id="2_0kujj"]
[ext_resource type="Script" uid="uid://b17qxyq8oh4kq" path="res://Game/Doll/doll_attach_to.gd" id="3_0v4py"]
[ext_resource type="PackedScene" uid="uid://3omr6ntpyb48" path="res://Game/Doll/doll_attach_point.tscn" id="4_0v4py"]
[ext_resource type="Material" uid="uid://bqrhnn81pvihm" path="res://Mesh/Parts/Head/FelineHead/HeadMat.tres" id="4_4wgvr"]
[ext_resource type="Texture2D" uid="uid://jhs5mw3w2y3p" path="res://Mesh/Parts/SharedTextures/Brows/brow1.png" id="6_fk6bo"]
[ext_resource type="Texture2D" uid="uid://dqqgx26c8rdly" path="res://Mesh/Parts/SharedTextures/Eyelashes/MyEyelashes1.png" id="7_qg2ga"]
[ext_resource type="Material" uid="uid://crsv57v2tbwqk" path="res://Mesh/Parts/SharedMaterials/EyeMat.tres" id="8_4wgvr"]
[ext_resource type="Script" uid="uid://bk8a3rmejmdn" path="res://Mesh/Materials/MyBodyMat/MyMasterBodyMat.gd" id="9_p6sel"]
[ext_resource type="Texture2D" uid="uid://ddr3ya0h40vym" path="res://Mesh/Parts/Head/FelineHead/Textures/Fur/MyFelineHeadV2_low_FelineMouth_BaseColor.png" id="10_ew517"]
[ext_resource type="Texture2D" uid="uid://ctjw3n1h35bah" path="res://Mesh/Parts/Head/FelineHead/Textures/Fur/MyFelineHeadV2_low_FelineMouth_Emit.png" id="11_4wgvr"]
[ext_resource type="Texture2D" uid="uid://dpp2scgbab25y" path="res://Mesh/Parts/Head/FelineHead/Textures/Fur/MyFelineHeadV2_low_FelineMouth_Normal.png" id="12_pbyhb"]
[ext_resource type="Texture2D" uid="uid://b6vi42bo4ed2k" path="res://Mesh/Parts/Head/FelineHead/Textures/Fur/MyFelineHeadV2_low_FelineMouth_ORM.png" id="13_uaaub"]
[ext_resource type="PackedScene" uid="uid://bgux6rpndyvti" path="res://Mesh/Materials/MyLayeredTexture/my_layered_texture.tscn" id="14_ew517"]
[ext_resource type="PackedScene" uid="uid://di8q5ut8regou" path="res://Game/Doll/FaceAnimator/face_animator.tscn" id="15_4wgvr"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_kw5g6"]
transparency = 1
albedo_texture = ExtResource("6_fk6bo")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_3i52i"]
transparency = 1
albedo_texture = ExtResource("7_qg2ga")

[sub_resource type="Shader" id="Shader_4wgvr"]
code = "shader_type spatial;

#define MY_FRESHNEL
#define MY_COLORMASK


render_mode
blend_mix,
#ifdef MY_ALPHASUPPORT
depth_prepass_alpha,
#endif
depth_draw_opaque,
#ifdef MY_TOONSHADING
diffuse_toon,
#else
diffuse_burley,
#endif
specular_schlick_ggx,
#ifdef MY_SUBSURFACESCATTER
sss_mode_skin,
#endif
#ifdef MY_DOUBLESIDED
cull_disabled
#else
cull_back
#endif
;

uniform vec4 albedo : source_color = vec4(1.0);
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform sampler2D texture_orm : hint_roughness_g, filter_linear_mipmap, repeat_enable;

uniform float roughness : hint_range(0.0, 1.0) = 1.0;

uniform float specular : hint_range(0.0, 1.0, 0.01) = 0.5;
uniform float metallic : hint_range(0.0, 1.0, 0.01) = 1.0;

uniform sampler2D texture_normal : hint_roughness_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_scale : hint_range(-16.0, 16.0) = 1.0;

#ifdef MY_ALPHAMASK
uniform sampler2D texture_alpha : hint_default_black, filter_nearest, repeat_enable;
uniform float alpha_scissor_threshold : hint_range(0.0, 1.0, 0.001) = 0.5;
#endif

#ifdef MY_RIMLIGHT
uniform float rim : hint_range(0.0, 3.0, 0.01) = 1.0;
uniform float rim_tint : hint_range(0.0, 1.0, 0.01) = 0.5;
//uniform sampler2D texture_rim : hint_default_white, filter_linear_mipmap, repeat_enable;
#endif

uniform float ao_light_affect : hint_range(0.0, 1.0, 0.01) = 0.0;
uniform float ao_mult : hint_range(0.0, 1.0, 0.01) = 1.0;

#ifdef MY_SUBSURFACESCATTER
uniform float subsurface_scattering_strength : hint_range(0.0, 1.0, 0.01) = 0.5;
//uniform sampler2D texture_subsurface_scattering : hint_default_white, filter_linear_mipmap, repeat_enable;
#endif

#ifdef MY_BACKLIGHT
uniform vec4 backlight : source_color = vec4(0.3, 0.24, 0.24, 1.0);
//uniform sampler2D texture_backlight : hint_default_black, filter_linear_mipmap, repeat_enable;
#endif

uniform vec3 uv1_scale = vec3(1.0, 1.0, 1.0);
uniform vec3 uv1_offset = vec3(0.0);
//uniform vec3 uv2_scale = vec3(1.0, 1.0, 1.0);
//uniform vec3 uv2_offset = vec3(0.0);

#ifdef MY_FRESHNEL
uniform float freshnel_width : hint_range(0.0, 30.0, 0.1) = 5.0;
uniform float freshnel_mod : hint_range(0.0, 0.3, 0.01) = 0.1;
uniform vec3 freshnel_color : source_color = vec3(0.05,0.02,0.02);

float fresnel(float amount, vec3 normal, vec3 view)
{
	return pow((1.0 - clamp(dot(normalize(normal), normalize(view))-freshnel_mod, 0.0, 1.0 )), amount);
}
#endif

//#define MY_COLORMASK
#ifdef MY_COLORMASK
uniform sampler2D texture_color_mask : hint_default_transparent, filter_linear_mipmap, repeat_enable;
uniform vec4 color_mask_r : source_color = vec4(1.0, 0.0, 0.0, 1.0);
uniform vec4 color_mask_g : source_color = vec4(0.0, 1.0, 0.0, 1.0);
uniform vec4 color_mask_b : source_color = vec4(0.0, 0.0, 1.0, 1.0);
#endif

//#define MY_GLOBALDETAILROUGHMAP
#ifdef MY_GLOBALDETAILROUGHMAP
uniform sampler2D texture_detail_rough_global : hint_roughness_b, filter_linear_mipmap, repeat_enable;
uniform float detail_rough_scale : hint_range(0.01, 100.0, 0.01) = 1.0;
uniform float detail_rough_blend : hint_range(0.01, 3.0, 0.01) = 1.0;

#endif
//#define MY_GLOBALDETAILMAP
#ifdef MY_GLOBALDETAILMAP
uniform sampler2D texture_detail_normal_global : hint_normal, filter_linear_mipmap, repeat_enable;
uniform float detail_normal_scale : hint_range(0.01, 100.0, 0.01) = 1.0;
uniform float detail_normal_blend : hint_range(0.01, 3.0, 0.01) = 1.0;

vec3 _simple_normal_blend(vec3 b, vec3 d) {
	return vec3(b.xy + d.xy - 0.5, 1.0);
}

vec3 udm_normal_blend(vec3 b, vec3 d) {
	b = b*2.0 - 1.0;
	d = d*2.0 - 1.0;
	vec3 r = vec3(b.xy + d.xy, b.z);
	r = normalize(r);
	return r*0.5 + 0.5;
}
#endif

//#define MY_OUTLINE
#ifdef MY_OUTLINE
uniform vec4 outline_color : source_color = vec4(0.0, 0.0, 0.0, 1.0);
uniform float edge_threshold : hint_range(0.0, 1.0) = 0.05;
uniform float rim_threshold : hint_range(0.0, 1.0) = 0.8;
#endif

//#define MY_CUMLAYER
#ifdef MY_CUMLAYER
uniform sampler2D texture_cum_layer: source_color, hint_default_white, filter_linear_mipmap, repeat_enable;
uniform float cum_layer_scale : hint_range(0.0, 10.0) = 1.0;

uniform sampler2D texture_cum_mask: hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 cum_color : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform float cumRoughness : hint_range(0.0, 1.0) = 0.0;
uniform float cumScroll : hint_range(0.0, 1.0) = 0.0;

uniform float cumCutoff : hint_range(0.0, 1.0) = 0.0;
uniform float cumSmoothSize : hint_range(0.0, 1.0) = 0.1;
#endif

void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;
}

void fragment() {
	vec2 base_uv = UV;

#ifdef MY_UV_BASED_DISCARD
	if(base_uv.y < 0.0)
		discard;
#endif

	vec4 albedo_tex = texture(texture_albedo, base_uv);
	vec4 orm_tex = texture(texture_orm, base_uv);

	ALBEDO = albedo.rgb * albedo_tex.rgb;

#ifdef MY_COLORMASK
	vec4 mask = texture(texture_color_mask, base_uv);
{
	float maskF = mask.r + mask.g + mask.b;
	maskF = max(maskF, 1.0);
	mask.rgb /= maskF;

	vec4 color_r = color_mask_r;
	vec4 color_g = color_mask_g;
	vec4 color_b = color_mask_b;

    vec4 result = vec4(0.0);
	result += mask.r*color_r*color_r.a;
	result += mask.g*color_g*color_g.a;
	result += mask.b*color_b*color_b.a;

	result.a *= mask.a;

	vec4 mask_color = texture(texture_color_mask, base_uv);

	ALBEDO.rgb = mix(ALBEDO.rgb, result.rgb, result.a);

	//ALBEDO.rgb = mix(ALBEDO.rgb, albedo_tex.rgb*color_mask_r, mask_color.r);
	//ALBEDO.rgb = mix(ALBEDO.rgb, albedo_tex.rgb*color_mask_g, mask_color.g);
	//ALBEDO.rgb = mix(ALBEDO.rgb, albedo_tex.rgb*color_mask_b, mask_color.b);
}
#endif

#ifdef MY_FRESHNEL
	// Freshnel: Enabled
	float basic_fresnel = fresnel(freshnel_width, NORMAL, VIEW);
	basic_fresnel = smoothstep(0.0, 1.0, basic_fresnel)*1.0; //0.5 magic number seems to give the most intuitive control
	ALBEDO = mix(ALBEDO, freshnel_color, basic_fresnel);// - basic_fresnel;
#endif

	METALLIC = orm_tex.b * metallic;
	SPECULAR = specular;

	//vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	ROUGHNESS = orm_tex.g * roughness;

#ifdef MY_COLORMASK
#ifdef MY_EYEMODE
	ROUGHNESS *= min(1.0 - mask.g*0.9, 1.0);
	EMISSION = albedo_tex.rgb*color_mask_g.rgb*mask.g;
	EMISSION.rgb = mix(EMISSION.rgb, albedo_tex.rgb*color_mask_r.rgb, mask.r*0.5);
	//EMISSION.rgb *= 2.0;
#endif
#endif

	// Normal Map: Enabled
	NORMAL_MAP = texture(texture_normal, base_uv).rgb;
	NORMAL_MAP_DEPTH = normal_scale;

#ifdef MY_RIMLIGHT
	// Rim: Enabled
	//vec2 rim_tex = texture(texture_rim, base_uv).xy;
	RIM = rim;// * rim_tex.x;// - basic_fresnel*2.5;
	RIM_TINT = rim_tint;// * rim_tex.y;
#endif

	// Ambient Occlusion: Enabled
	AO = orm_tex.r * ao_mult;
	AO_LIGHT_AFFECT = ao_light_affect;

#ifdef MY_SUBSURFACESCATTER
	// Subsurface Scattering: Enabled
	//float sss_tex = texture(texture_subsurface_scattering, base_uv).r;
	SSS_STRENGTH = subsurface_scattering_strength;// * sss_tex;
#endif

#ifdef MY_BACKLIGHT
	// Backlight: Enabled
	//vec3 backlight_tex = texture(texture_backlight, base_uv).rgb;
	BACKLIGHT = (backlight.rgb);// + backlight_tex);
#endif

#ifdef MY_ALPHAMASK
	vec4 alpha_tex = texture(texture_alpha, base_uv);
	ALPHA *= (1.0 - alpha_tex.r);
	ALPHA_SCISSOR_THRESHOLD = alpha_scissor_threshold;
#endif

#ifdef MY_ALPHASUPPORT
	ALPHA *= albedo_tex.a*albedo.a;
#endif

#ifdef MY_GLOBALDETAILMAP
	vec3 detail_norm_tex_global = texture(texture_detail_normal_global, base_uv*detail_normal_scale).rgb; // base_uv
	detail_norm_tex_global = mix(vec3(0.5,0.5,1.0), detail_norm_tex_global, detail_normal_blend);
	NORMAL_MAP = udm_normal_blend(NORMAL_MAP, detail_norm_tex_global); //_simple_normal_blend
#endif

#ifdef MY_GLOBALDETAILROUGHMAP
	vec3 detail_rough_tex_global = texture(texture_detail_rough_global, base_uv*detail_rough_scale).rgb; // base_uv
	detail_rough_tex_global.g = detail_rough_tex_global.g * (detail_rough_blend) + 1.0 - detail_rough_blend;

	//detail_rough_tex_global.rgb = mix(vec3(0.5,0.5,1.0), detail_norm_tex_global, detail_normal_blend);
	//NORMAL_MAP = udm_normal_blend(NORMAL_MAP, detail_norm_tex_global); //_simple_normal_blend
	ROUGHNESS *= detail_rough_tex_global.g;
#endif

#ifdef MY_CUMLAYER

	vec4 cum_tex = texture(texture_cum_layer, (base_uv + vec2(cumScroll*3.3, cumScroll) - vec2(0.0, TIME*0.001))*cum_layer_scale);
	vec4 cum_mask_tex = texture(texture_cum_mask, base_uv);
	
	float cumValue = cum_tex.a;
	float cumAlphaAlpha = smoothstep(cumCutoff, cumCutoff + cumSmoothSize, cumValue * (1.0 - cumSmoothSize) + cumSmoothSize);
	
	float cumAlpha = cum_tex.a * cum_mask_tex.r * cum_color.a * cumAlphaAlpha;
	
	ALBEDO = mix(ALBEDO, cum_tex.rgb*cum_color.rgb, cumAlpha);
	ROUGHNESS = mix(ROUGHNESS, cumRoughness, cumAlpha);
	
	BACKLIGHT = mix(BACKLIGHT, vec3(0.5, 0.5, 0.5), cumAlpha);
	//SPECULAR = 3.0;//mix(SPECULAR, 30.0, min(cumAlpha*3.0, 1.0));
	//RIM = mix(RIM, 1.0, cumAlpha);
	//RIM_TINT = mix(RIM_TINT, 1.0, cumAlpha);
#endif

#ifdef MY_OUTLINE
	float rimOutline = 1.0 - max(dot(NORMAL, VIEW), 0.0); // VIEW is camera dir

    vec3 nOutline = normalize(NORMAL);
    vec3 dxOutline = dFdx(nOutline);
    vec3 dyOutline = dFdy(nOutline);
    float edgeOutline = dot(dxOutline, dxOutline) + dot(dyOutline, dyOutline);
	edgeOutline /= dot(VERTEX, VERTEX);

    if (edgeOutline > (edge_threshold*edge_threshold) && rimOutline > rim_threshold) {
        ALBEDO = mix(ALBEDO, outline_color.rgb, rimOutline*0.7);
    }
#endif

}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_3ik7j"]
render_priority = 0
shader = SubResource("Shader_4wgvr")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/texture_albedo = ExtResource("10_ew517")
shader_parameter/texture_orm = ExtResource("13_uaaub")
shader_parameter/roughness = 1.0
shader_parameter/specular = 0.5
shader_parameter/metallic = 1.0
shader_parameter/texture_normal = ExtResource("12_pbyhb")
shader_parameter/normal_scale = 1.0
shader_parameter/ao_light_affect = 0.0
shader_parameter/ao_mult = 1.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/freshnel_width = 19.8
shader_parameter/freshnel_mod = 0.15
shader_parameter/freshnel_color = Color(0.05, 0.02, 0.02, 1)
shader_parameter/texture_color_mask = ExtResource("11_4wgvr")
shader_parameter/color_mask_r = Color(0.760784, 0.258824, 0.258824, 1)
shader_parameter/color_mask_g = Color(0.76, 0.2584, 0.2584, 1)
shader_parameter/color_mask_b = Color(1, 1, 1, 1)
script = ExtResource("9_p6sel")
backlight = false
freshnel = true
rimlight = false
subsurfaceScattering = false
alphaMask = false
uvBasedDiscard = false
alphaSupport = false
globalDetailMask = false
globalDetailRoughMask = false
colorMask = true
eyeMode = false
doubleSided = false
outline = false
toonShading = false
cumLayer = false
clearCache = false
metadata/_custom_type_script = ExtResource("9_p6sel")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_a88nv"]
transparency = 1
albedo_color = Color(0.27, 0.27, 0.27, 0.501961)

[node name="FelineHead" instance=ExtResource("1_qhi50")]
script = ExtResource("2_0kujj")
eyeMat = ExtResource("8_4wgvr")
headMat = ExtResource("4_4wgvr")

[node name="MyHeadRig" parent="." index="0"]
script = ExtResource("3_0v4py")
attachPoint = "head"

[node name="Skeleton3D" parent="MyHeadRig" index="0"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.016, -0.01)
bones/1/rotation = Quaternion(5.4034e-07, 0.207265, 0.978285, 1.14479e-07)
bones/2/position = Vector3(2.90426e-08, 0.0961214, 0.0262907)
bones/3/position = Vector3(-0.0195124, 0.0887538, 0.0236524)
bones/4/rotation = Quaternion(0.251698, 5.46488e-07, -1.84913e-07, 0.967806)
bones/5/position = Vector3(0.0195124, 0.0887539, 0.0236523)
bones/6/position = Vector3(0.0302246, 0.072747, 0.0159155)
bones/6/rotation = Quaternion(0.251698, 5.46488e-07, -1.84913e-07, 0.967806)
bones/7/rotation = Quaternion(-1.77351e-07, 0.972315, 0.233675, -1.81204e-06)
bones/9/position = Vector3(-2.75872e-14, 0.0207229, 1.78295e-08)
bones/9/rotation = Quaternion(0.0235056, -1.81947e-06, -1.02931e-07, 0.999724)
bones/10/rotation = Quaternion(0.465239, 0.525497, 0.567273, 0.430821)
bones/11/position = Vector3(-3.26119e-16, 0.0166931, 0.137374)
bones/12/position = Vector3(0.0381667, 0.00436759, 0.0825039)
bones/12/rotation = Quaternion(2.92728e-05, 0.584543, 0.811363, 2.10872e-05)
bones/13/rotation = Quaternion(3.09086e-08, 0.707107, 0.707107, 3.09086e-08)
bones/14/rotation = Quaternion(3.09086e-08, 0.707107, 0.707107, 3.09086e-08)
bones/15/position = Vector3(-0.0381667, 0.00436759, 0.0825039)
bones/15/rotation = Quaternion(-2.92727e-05, 0.584543, 0.811363, -2.10872e-05)
bones/16/rotation = Quaternion(3.09086e-08, 0.707107, 0.707107, 3.09086e-08)
bones/17/rotation = Quaternion(3.09086e-08, 0.707107, 0.707107, 3.09086e-08)
bones/18/rotation = Quaternion(0.0531128, 0.759278, 0.614335, -0.208013)
bones/19/rotation = Quaternion(0.201153, 0.736259, 0.586102, -0.271929)
bones/20/rotation = Quaternion(0.0767849, 0.730923, 0.677659, 0.0251854)
bones/21/rotation = Quaternion(0.293425, 0.647349, 0.592002, -0.379966)
bones/23/rotation = Quaternion(0.142533, 0.620279, 0.754219, -0.161531)
bones/24/rotation = Quaternion(0.218995, 0.619485, 0.701254, -0.276626)
bones/25/rotation = Quaternion(0.147627, 0.619609, 0.7709, 0.00234812)
bones/27/rotation = Quaternion(-0.46524, 0.525497, 0.567273, -0.430821)
bones/28/rotation = Quaternion(-0.0531134, 0.759277, 0.614335, 0.208014)
bones/29/rotation = Quaternion(-0.201153, 0.736259, 0.586102, 0.271929)
bones/30/rotation = Quaternion(-0.0767863, 0.730922, 0.67766, -0.0251846)
bones/32/rotation = Quaternion(-0.0587004, 0.64205, 0.761781, -0.063371)
bones/33/rotation = Quaternion(-0.141922, 0.617386, 0.756586, 0.162083)
bones/34/rotation = Quaternion(-0.218995, 0.619485, 0.701254, 0.276626)
bones/35/rotation = Quaternion(-0.147626, 0.619612, 0.770897, -0.00234867)
bones/36/rotation = Quaternion(0.707107, -1.5482e-06, -1.5482e-06, 0.707107)
bones/37/rotation = Quaternion(0.707107, -2.64401e-06, -2.64401e-06, 0.707107)
bones/40/rotation = Quaternion(0.707107, 1.5482e-06, 1.5482e-06, 0.707107)
bones/41/rotation = Quaternion(0.707107, 2.64401e-06, 2.64401e-06, 0.707107)

[node name="CheekFluff" parent="MyHeadRig/Skeleton3D" index="0"]
surface_material_override/0 = ExtResource("4_4wgvr")

[node name="EyeBrows" parent="MyHeadRig/Skeleton3D" index="1"]
surface_material_override/0 = SubResource("StandardMaterial3D_kw5g6")

[node name="Eyelashes" parent="MyHeadRig/Skeleton3D" index="2"]
surface_material_override/0 = SubResource("StandardMaterial3D_3i52i")

[node name="Eyes" parent="MyHeadRig/Skeleton3D" index="3"]
surface_material_override/0 = ExtResource("8_4wgvr")
surface_material_override/1 = ExtResource("8_4wgvr")

[node name="DollAttachPoint" parent="MyHeadRig/Skeleton3D" index="4" instance=ExtResource("4_0v4py")]
pointName = "hair"

[node name="DollAttachPoint6" parent="MyHeadRig/Skeleton3D" index="5" instance=ExtResource("4_0v4py")]
pointName = "head_items"

[node name="DollAttachPoint2" parent="MyHeadRig/Skeleton3D" index="6" instance=ExtResource("4_0v4py")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.0547889, 0.153346, 0.00886823)
pointName = "ear.L"

[node name="DollAttachPoint4" parent="MyHeadRig/Skeleton3D" index="7" instance=ExtResource("4_0v4py")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.0237597, 0.168494, 0.0774401)
pointName = "horn.L"

[node name="DollAttachPoint5" parent="MyHeadRig/Skeleton3D" index="8" instance=ExtResource("4_0v4py")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.024, 0.168, 0.077)
pointName = "horn.R"

[node name="DollAttachPoint3" parent="MyHeadRig/Skeleton3D" index="9" instance=ExtResource("4_0v4py")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.055, 0.153405, 0.009)
pointName = "ear.R"

[node name="FelineHead" parent="MyHeadRig/Skeleton3D" index="10"]
surface_material_override/0 = ExtResource("4_4wgvr")

[node name="FelineMouth" parent="MyHeadRig/Skeleton3D" index="11"]
surface_material_override/0 = SubResource("ShaderMaterial_3ik7j")

[node name="Whiskers" parent="MyHeadRig/Skeleton3D" index="12"]
visibility_range_end = 3.0
surface_material_override/0 = SubResource("StandardMaterial3D_a88nv")

[node name="AnimationPlayer" parent="." index="1"]
autoplay = "HeadTPose"

[node name="HeadLayeredTexture" parent="." index="2" instance=ExtResource("14_ew517")]
unique_name_in_owner = true
resolution = Vector2i(1024, 1024)
clearColor = Color(1, 1, 1, 1)
graphicsOptionAutoScale = 1

[node name="FaceAnimator" parent="." index="3" node_paths=PackedStringArray("dollPart", "animPlayer") instance=ExtResource("15_4wgvr")]
unique_name_in_owner = true
dollPart = NodePath("..")
animPlayer = NodePath("../AnimationPlayer")
moanMultiplier = 0.7

[connection signal="onTextureUpdated" from="HeadLayeredTexture" to="." method="_on_head_layered_texture_on_texture_updated"]
